name: iOS - Build CI

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    name: Build & Test
    runs-on: macos-latest   

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Set Default Scheme
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo Using default scheme: $default       
      - name: Build and Test with Code Coverage
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`

          RESULT_BUNDLE="CodeCoverage.xcresult"
          RESULT_JSON="CodeCoverage.json"
          MIN_CODE_COVERAGE=50.0
      
          # Pre-clean
          if [ -d $RESULT_BUNDLE ]; then
            rm -rf $RESULT_BUNDLE
          fi
          if [ -f $RESULT_JSON ]; then
            rm $RESULT_JSON
          fi
      
          # Build
          set -o pipefail && env NSUnbufferedIO=YES xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -enableCodeCoverage YES | xcpretty
      
          # Test
          set -o pipefail && env NSUnbufferedIO=YES xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -enableCodeCoverage YES -resultBundlePath $RESULT_BUNDLE | xcpretty
      
          # Code coverage
          set -o pipefail && env NSUnbufferedIO=YES xcrun xccov view --report --json $RESULT_BUNDLE > $RESULT_JSON
          CODE_COVERAGE=$(cat $RESULT_JSON | jq '.targets[] | select( .name == "Grocery Guru" and .executableLines > 0 ) | .lineCoverage')
          
          if [[ ! -z "$CODE_COVERAGE" && "$CODE_COVERAGE" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
              CODE_COVERAGE=$(echo $CODE_COVERAGE | awk '{print $1*100.0}')
          else
              echo "CODE_COVERAGE is not a number or is empty"
              exit 1
          fi

          COVERAGE_PASSES=$(awk "BEGIN {if ($CODE_COVERAGE > $MIN_CODE_COVERAGE) print 1; else print 0}")
          if [ -z "$COVERAGE_PASSES" ] || [ $COVERAGE_PASSES -ne 1 ]; then
              printf "\033[0;31mCode coverage %.1f%% is less than required %.1f%%\033[0m\n" $CODE_COVERAGE $MIN_CODE_COVERAGE
              exit -1
          else
              printf "\033[0;32mCode coverage is %.1f%%\033[0m\n" $CODE_COVERAGE
          fi